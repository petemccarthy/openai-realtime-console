I'll help convert the Supabase documentation into a clean markdown format:

# Getting Started with Supabase and React

## 1. Create a Supabase Project

1. Go to [database.new](https://database.new) and create a new Supabase project
2. Once your project is running, you can either:
   - Use the Table Editor to create tables and insert data
   - Or use the SQL Editor with the following commands:

```sql
-- Create the table
create table countries (
  id bigint primary key generated always as identity,
  name text not null
);

-- Insert some sample data into the table
insert into countries (name)
values
  ('Canada'),
  ('United States'),
  ('Mexico');

alter table countries enable row level security;
```

3. Add a Row Level Security (RLS) policy to make the data publicly readable:

```sql
create policy "public can read countries"
on public.countries
for select to anon
using (true);
```

## 2. Create a React App

Create a new React app using Vite:

```bash
npm create vite@latest my-app -- --template react
```

## 3. Install Supabase Client

Navigate to your project directory and install the Supabase JavaScript client:

```bash
cd my-app && npm install @supabase/supabase-js
```

## 4. Set Up the React App

Create a new file `src/App.jsx` with the following code:

```jsx
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient("https://<project>.supabase.co", "<your-anon-key>");

function App() {
  const [countries, setCountries] = useState([]);

  useEffect(() => {
    getCountries();
  }, []);

  async function getCountries() {
    const { data } = await supabase.from("countries").select();
    setCountries(data);
  }

  return (
    <ul>
      {countries.map((country) => (
        <li key={country.name}>{country.name}</li>
      ))}
    </ul>
  );
}

export default App;
```

> **Note**: Replace `<project>` and `<your-anon-key>` with your actual Supabase project URL and anon key from your project dashboard.

## 5. Start the Development Server

Run the development server and visit http://localhost:5173 in your browser:

```bash
npm run dev
```

# Tables and Data in Supabase

## Understanding Tables

Tables in Supabase are similar to spreadsheets, consisting of columns and rows. For example:

| id | name | description |
|----|------|-------------|
| 1 | The Phantom Menace | Two Jedi escape a hostile blockade to find allies and come across a young boy who may bring balance to the Force. |
| 2 | Attack of the Clones | Ten years after the invasion of Naboo, the Galactic Republic is facing a Separatist movement. |
| 3 | Revenge of the Sith | As Obi-Wan pursues a new threat, Anakin acts as a double agent between the Jedi Council and Palpatine and is lured into a sinister plan to rule the galaxy. |
| 4 | Star Wars | Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a Wookiee and two droids to save the galaxy from the Empire's world-destroying battle station. |

## Creating Tables

### Best Practices
- Add columns when creating tables
- Use lowercase and underscores for table names (e.g., `table_name`, not `Table Name`)
- Define data types for each column

### Methods to Create Tables
1. **Using Dashboard**:
   - Navigate to Table Editor
   - Click "New Table"
   - Name your table
   - Add columns with specified types
   - Save

2. **Using SQL**:
   ```sql
   create table movies (
     id bigint generated always as identity primary key
   );
   ```

## Primary Keys

### Key Points:
- Recommended for every table
- Must be unique for each row
- Commonly uses UUID or numbered identity column

Example:
```sql
-- Auto-incrementing ID
create table movies (
  id bigint generated always as identity primary key
);

-- Optional manual ID insertion
create table movies (
  id bigint generated by default as identity primary key
);
```

## Loading Data

### 1. Basic Data Loading

```sql
insert into movies
  (name, description)
values
  (
    'The Empire Strikes Back',
    'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  ),
  (
    'Return of the Jedi',
    'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  );
```

### 2. Bulk Data Loading

Using PostgreSQL's COPY command for large datasets:

```bash
# Basic COPY command
psql -h DATABASE_URL -p 5432 -d postgres -U postgres \
  -c "\COPY movies FROM './movies.csv';"

# With specific options
psql -h DATABASE_URL -p 5432 -d postgres -U postgres \
  -c "\COPY movies FROM './movies.csv' WITH DELIMITER ',' CSV HEADER"
```

## Table Relationships

### Foreign Keys
Tables can be joined together using Foreign Keys. For example:

```sql
-- Create categories table
create table categories (
  id bigint generated always as identity primary key,
  name text -- category name
);

-- Add category reference to movies
alter table movies
  add column category_id bigint references categories;
```

## Schemas

Schemas help organize tables, often for security purposes:

```sql
-- Create private schema
create schema private;

-- Create table in private schema
create table private.salaries (
  id bigint generated by default as identity primary key,
  salary bigint not null,
  actor_id bigint not null references public.actors
);
```

## Views

### Creating Views
```sql
create view transcripts as
    select
        students.name,
        students.type,
        courses.title,
        courses.code,
        grades.result
    from grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
```

### Security Configuration
```sql
-- Change to security_invoker
alter view <view name>
set (security_invoker = true);

-- Create with security_invoker
create view <view name> with(security_invoker=true) as (
  select * from <some table>
);
```

### Materialized Views

```sql
-- Create materialized view
create materialized view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

-- Refresh materialized view
refresh materialized view transcripts;
```

### Benefits of Views:
1. **Simplicity**: Simplify complex queries
2. **Consistency**: Maintain consistent data access patterns
3. **Organization**: Better logical organization of queries
4. **Security**: Control access to underlying data
# Importing Data into Supabase

## Overview of Import Methods

There are four main ways to import data into Supabase:
1. CSV import via Dashboard
2. Bulk import using pgloader
3. Postgres COPY command
4. Supabase API

## 1. CSV Import via Dashboard

**Best for**: Small datasets (under 100MB)
1. Navigate to Table Editor
2. Click "Insert" 
3. Choose "Import Data from CSV"
4. Follow on-screen instructions

## 2. Bulk Import Using pgloader

**Step 1**: Install pgloader
```bash
apt-get install pgloader
```

**Step 2**: Create configuration file (e.g., `config.load`)
```sql
LOAD DATABASE
    FROM sourcedb://USER:PASSWORD@HOST/SOURCE_DB
    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres
ALTER SCHEMA 'public' OWNER TO 'postgres';

set wal_buffers = '64MB', 
    max_wal_senders = 0, 
    statement_timeout = 0, 
    work_mem to '2GB';
```

Configuration parameters:
- `wal_buffers`: 64MB for write-ahead logging
- `max_wal_senders`: 0 to disable replication
- `statement_timeout`: 0 for no time limit
- `work_mem`: 2GB for query operations

**Step 3**: Run pgloader
```bash
pgloader config.load
```

## Preparing for Data Import

### 1. Back Up Your Data
- Pro, Team, and Enterprise Plans: Automatic scheduled backups
- Manual backups recommended before large imports

### 2. Increase Statement Timeouts
```sql
-- Adjust statement timeout for longer-running queries
SET statement_timeout = '1h';
```

### 3. Estimate Required Disk Size
- Calculate required space
- Manually increase disk size in project settings

### 4. Disable Triggers
```sql
-- Disable triggers on specific table
ALTER TABLE table_name DISABLE TRIGGER ALL;

-- Re-enable triggers after import
ALTER TABLE table_name ENABLE TRIGGER ALL;
```

### 5. Rebuild Indices
```sql
-- Create index after data import
CREATE INDEX index_name ON table_name (column_name);
```

## Best Practices for Different Scenarios

### Small Development Datasets
- Use Dashboard CSV import
- Quick for experimentation
- Simple interface

### Large Production Datasets
1. Plan ahead
2. Prepare database
3. Use pgloader or COPY command
4. Consider performance impact

### Using Supabase API
- Avoid bulk imports
- Better for smaller, regular data updates
- Consider rate limiting

## Working with Rate Limits

**Best Practices**:
1. Break large imports into smaller batches
2. Implement retry logic
3. Monitor API usage
4. Use bulk import tools for large datasets

## Error Handling

```javascript
async function importData(data) {
  try {
    const { error } = await supabase
      .from('your_table')
      .insert(data)
    
    if (error) throw error
  } catch (error) {
    console.error('Error importing data:', error.message)
    // Implement retry logic or error handling
  }
}
```

## Monitoring Import Progress

### Dashboard Method
- Progress bar available
- Real-time status updates

### Custom Implementation
```javascript
async function importWithProgress(data) {
  const total = data.length;
  let processed = 0;

  for (const batch of chunks(data, 1000)) {
    await importData(batch);
    processed += batch.length;
    console.log(`Progress: ${(processed/total * 100).toFixed(2)}%`);
  }
}

function chunks(array, size) {
  return Array.from({ 
    length: Math.ceil(array.length / size) 
  }, (_, i) => array.slice(i * size, i * size + size));
}
```

## Post-Import Verification

```sql
-- Check row count
SELECT COUNT(*) FROM your_table;

-- Verify data integrity
SELECT column_name, COUNT(*) 
FROM your_table 
WHERE column_name IS NULL 
GROUP BY column_name;

-- Check for duplicates
SELECT column_name, COUNT(*) 
FROM your_table 
GROUP BY column_name 
HAVING COUNT(*) > 1;
```
# Working with Supabase Views and Data Access

## Views in Detail

### Basic View Creation
```sql
CREATE VIEW movie_details AS
  SELECT 
    movies.id,
    movies.title,
    categories.name as category,
    movies.description
  FROM movies
  LEFT JOIN categories ON movies.category_id = categories.id;
```

### View Benefits

1. **Query Simplification**
```sql
-- Instead of complex query
SELECT 
  students.name,
  students.type,
  courses.title,
  courses.code,
  grades.result
FROM grades
LEFT JOIN students ON grades.student_id = students.id
LEFT JOIN courses ON grades.course_id = courses.id;

-- Simply use
SELECT * FROM transcripts;
```

2. **Data Consistency**
```sql
-- Modify view instead of updating multiple queries
CREATE OR REPLACE VIEW movie_list AS
  SELECT *
  FROM movies
  WHERE status = 'active'  -- Single place to modify conditions
```

3. **Security Layer**
```sql
-- Restrict sensitive data
CREATE VIEW public_user_data AS
  SELECT 
    id,
    username,
    profile_picture
  FROM users;  -- Excludes sensitive columns like email, password_hash
```

## Materialized Views

### Creation and Management
```sql
-- Create materialized view
CREATE MATERIALIZED VIEW monthly_stats AS
  SELECT 
    date_trunc('month', created_at) as month,
    COUNT(*) as total_transactions,
    SUM(amount) as total_amount
  FROM transactions
  GROUP BY date_trunc('month', created_at)
  WITH DATA;  -- Populate immediately

-- Refresh data
REFRESH MATERIALIZED VIEW monthly_stats;

-- Refresh concurrently (allows reads during refresh)
REFRESH MATERIALIZED VIEW CONCURRENTLY monthly_stats;
```

### Performance Optimization
```sql
-- Add indexes to materialized view
CREATE UNIQUE INDEX monthly_stats_month_idx 
  ON monthly_stats(month);
```

## Row Level Security (RLS)

### Basic Policies

1. **Read Access**
```sql
CREATE POLICY "Public read access"
  ON public.posts
  FOR SELECT
  USING (status = 'published');
```

2. **Write Access**
```sql
CREATE POLICY "Users can create posts"
  ON public.posts
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);
```

3. **Update Access**
```sql
CREATE POLICY "Users can update own posts"
  ON public.posts
  FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
```

### Complex Policy Examples

1. **Organization-based Access**
```sql
CREATE POLICY "Organization members access"
  ON public.documents
  USING (
    auth.uid() IN (
      SELECT user_id 
      FROM organization_members 
      WHERE org_id = documents.org_id
    )
  );
```

2. **Time-based Access**
```sql
CREATE POLICY "Temporary access"
  ON public.temporary_content
  FOR SELECT
  USING (
    current_timestamp BETWEEN valid_from AND valid_until
  );
```

## Database Functions

### Custom Functions
```sql
-- Create a function
CREATE OR REPLACE FUNCTION get_user_posts(user_id UUID)
RETURNS SETOF posts AS $$
  SELECT *
  FROM posts
  WHERE author_id = user_id
  ORDER BY created_at DESC;
$$ LANGUAGE sql SECURITY DEFINER;

-- Use in queries
SELECT * FROM get_user_posts('123e4567-e89b-12d3-a456-426614174000');
```

### Trigger Functions
```sql
-- Create trigger function
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger
CREATE TRIGGER set_updated_at
  BEFORE UPDATE ON posts
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();
```

## Database Indexes

### Common Index Types
```sql
-- B-tree index (default)
CREATE INDEX ON posts(title);

-- Partial index
CREATE INDEX active_posts_idx 
  ON posts(created_at) 
  WHERE status = 'active';

-- Multi-column index
CREATE INDEX posts_search_idx 
  ON posts(title, content);

-- GiST index (for geographical data)
CREATE INDEX location_idx 
  ON stores USING GIST (location);
```

# Handling Authentication and Users in Supabase

## Setting Up Authentication

### 1. Initialize Supabase Client
```javascript
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://your-project.supabase.co',
  'your-anon-key'
)
```

### 2. Email/Password Authentication

```javascript
// Sign Up
async function signUp(email, password) {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
  })
  if (error) throw error
  return data
}

// Sign In
async function signIn(email, password) {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  })
  if (error) throw error
  return data
}

// Sign Out
async function signOut() {
  const { error } = await supabase.auth.signOut()
  if (error) throw error
}
```

### 3. Social Authentication
```javascript
// Sign in with OAuth provider
async function signInWithProvider(provider) {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider, // 'github', 'google', 'facebook', etc.
  })
  if (error) throw error
  return data
}
```

## Managing User Sessions

### 1. Get Current Session
```javascript
async function getCurrentSession() {
  const { data: { session }, error } = await supabase.auth.getSession()
  if (error) throw error
  return session
}
```

### 2. Listen to Auth Changes
```javascript
supabase.auth.onAuthStateChange((event, session) => {
  switch (event) {
    case 'SIGNED_IN':
      // Handle sign in
      break
    case 'SIGNED_OUT':
      // Handle sign out
      break
    case 'TOKEN_REFRESHED':
      // Handle token refresh
      break
  }
})
```

## User Profiles

### 1. Create Profile Table
```sql
create table profiles (
  id uuid references auth.users on delete cascade,
  username text unique,
  avatar_url text,
  website text,
  updated_at timestamp with time zone,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

-- Enable RLS
alter table profiles enable row level security;

-- Create policies
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );
```

### 2. Handle Profile Management
```javascript
// Update profile
async function updateProfile({ username, avatar_url, website }) {
  const user = supabase.auth.user()

  const updates = {
    id: user.id,
    username,
    avatar_url,
    website,
    updated_at: new Date(),
  }

  const { data, error } = await supabase
    .from('profiles')
    .upsert(updates)

  if (error) throw error
  return data
}

// Get profile
async function getProfile(userId) {
  const { data, error } = await supabase
    .from('profiles')
    .select('username, avatar_url, website')
    .eq('id', userId)
    .single()

  if (error) throw error
  return data
}
```

## Protected Routes in React

```javascript
import { Navigate } from 'react-router-dom'
import { useAuth } from './auth-context'

function PrivateRoute({ children }) {
  const { user } = useAuth()

  return user ? children : <Navigate to="/login" />
}

// Usage
function App() {
  return (
    <Routes>
      <Route path="/public" element={<PublicPage />} />
      <Route
        path="/protected"
        element={
          <PrivateRoute>
            <ProtectedPage />
          </PrivateRoute>
        }
      />
    </Routes>
  )
}
```

## Custom Authentication Hook

```javascript
import { useState, useEffect, createContext, useContext } from 'react'
import { supabase } from './supabaseClient'

const AuthContext = createContext({})

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null)
      setLoading(false)
    })

    // Listen for changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null)
    })

    return () => subscription.unsubscribe()
  }, [])

  const value = {
    signUp: (data) => supabase.auth.signUp(data),
    signIn: (data) => supabase.auth.signInWithPassword(data),
    signOut: () => supabase.auth.signOut(),
    user,
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}

// Custom hook to use auth context
export function useAuth() {
  return useContext(AuthContext)
}

# Postcard Table Schema
create table postcards (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  user_id uuid default '00000000-0000-0000-0000-000000000000'::uuid,
  message text,
  image_url text,
  status text default 'draft' check (status in ('draft'))
);

-- Enable Row Level Security (RLS)
alter table postcards enable row level security;

-- Create policies that allow access to all postcards (no user restriction)
create policy "Allow select access to all postcards"
  on postcards for select
  using (true);

create policy "Allow insert access to all postcards"
  on postcards for insert
  with check (true);

create policy "Allow update access to all postcards"
  on postcards for update
  using (true);

-- Create indexes
create index postcards_user_id_idx on postcards(user_id);
create index postcards_status_idx on postcards(status);
